// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "links.hxx"

namespace gestColl
{
  namespace links
  {
    // link
    // 

    const link::nome_optional& link::
    nome () const
    {
      return this->nome_;
    }

    link::nome_optional& link::
    nome ()
    {
      return this->nome_;
    }

    void link::
    nome (const nome_type& x)
    {
      this->nome_.set (x);
    }

    void link::
    nome (const nome_optional& x)
    {
      this->nome_ = x;
    }

    void link::
    nome (::std::auto_ptr< nome_type > x)
    {
      this->nome_.set (x);
    }

    const link::url_type& link::
    url () const
    {
      return this->url_.get ();
    }

    link::url_type& link::
    url ()
    {
      return this->url_.get ();
    }

    void link::
    url (const url_type& x)
    {
      this->url_.set (x);
    }

    void link::
    url (::std::auto_ptr< url_type > x)
    {
      this->url_.set (x);
    }

    const link::note_optional& link::
    note () const
    {
      return this->note_;
    }

    link::note_optional& link::
    note ()
    {
      return this->note_;
    }

    void link::
    note (const note_type& x)
    {
      this->note_.set (x);
    }

    void link::
    note (const note_optional& x)
    {
      this->note_ = x;
    }

    void link::
    note (::std::auto_ptr< note_type > x)
    {
      this->note_.set (x);
    }


    // linklist
    // 

    const linklist::link_sequence& linklist::
    link () const
    {
      return this->link_;
    }

    linklist::link_sequence& linklist::
    link ()
    {
      return this->link_;
    }

    void linklist::
    link (const link_sequence& s)
    {
      this->link_ = s;
    }

    const linklist::id_type& linklist::
    id () const
    {
      return this->id_.get ();
    }

    linklist::id_type& linklist::
    id ()
    {
      return this->id_.get ();
    }

    void linklist::
    id (const id_type& x)
    {
      this->id_.set (x);
    }

    void linklist::
    id (::std::auto_ptr< id_type > x)
    {
      this->id_.set (x);
    }


    // links
    // 

    const links::categoria_sequence& links::
    categoria () const
    {
      return this->categoria_;
    }

    links::categoria_sequence& links::
    categoria ()
    {
      return this->categoria_;
    }

    void links::
    categoria (const categoria_sequence& s)
    {
      this->categoria_ = s;
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace gestColl
{
  namespace links
  {
    // link
    //

    link::
    link (const url_type& url)
    : ::xml_schema::type (),
      nome_ (::xml_schema::flags (), this),
      url_ (url, ::xml_schema::flags (), this),
      note_ (::xml_schema::flags (), this)
    {
    }

    link::
    link (const link& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      nome_ (x.nome_, f, this),
      url_ (x.url_, f, this),
      note_ (x.note_, f, this)
    {
    }

    link::
    link (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      nome_ (f, this),
      url_ (f, this),
      note_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false);
        this->parse (p, f);
      }
    }

    void link::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // nome
        //
        if (n.name () == L"nome" && n.namespace_ () == L"http://gestColl/links")
        {
          ::std::auto_ptr< nome_type > r (
            nome_traits::create (i, f, this));

          if (!this->nome_)
          {
            this->nome_.set (r);
            continue;
          }
        }

        // url
        //
        if (n.name () == L"url" && n.namespace_ () == L"http://gestColl/links")
        {
          ::std::auto_ptr< url_type > r (
            url_traits::create (i, f, this));

          if (!url_.present ())
          {
            this->url_.set (r);
            continue;
          }
        }

        // note
        //
        if (n.name () == L"note" && n.namespace_ () == L"http://gestColl/links")
        {
          ::std::auto_ptr< note_type > r (
            note_traits::create (i, f, this));

          if (!this->note_)
          {
            this->note_.set (r);
            continue;
          }
        }

        break;
      }

      if (!url_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"url",
          L"http://gestColl/links");
      }
    }

    link* link::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class link (*this, f, c);
    }

    link::
    ~link ()
    {
    }

    // linklist
    //

    linklist::
    linklist (const id_type& id)
    : ::xml_schema::type (),
      link_ (::xml_schema::flags (), this),
      id_ (id, ::xml_schema::flags (), this)
    {
    }

    linklist::
    linklist (const linklist& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      link_ (x.link_, f, this),
      id_ (x.id_, f, this)
    {
    }

    linklist::
    linklist (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      link_ (f, this),
      id_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, true);
        this->parse (p, f);
      }
    }

    void linklist::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // link
        //
        if (n.name () == L"link" && n.namespace_ () == L"http://gestColl/links")
        {
          ::std::auto_ptr< link_type > r (
            link_traits::create (i, f, this));

          this->link_.push_back (r);
          continue;
        }

        break;
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        if (n.name () == L"id" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< id_type > r (
            id_traits::create (i, f, this));

          this->id_.set (r);
          continue;
        }
      }

      if (!id_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"id",
          L"");
      }
    }

    linklist* linklist::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class linklist (*this, f, c);
    }

    linklist::
    ~linklist ()
    {
    }

    // links
    //

    links::
    links ()
    : ::xml_schema::type (),
      categoria_ (::xml_schema::flags (), this)
    {
    }

    links::
    links (const links& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      categoria_ (x.categoria_, f, this)
    {
    }

    links::
    links (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      categoria_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false);
        this->parse (p, f);
      }
    }

    void links::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // categoria
        //
        if (n.name () == L"categoria" && n.namespace_ () == L"http://gestColl/links")
        {
          ::std::auto_ptr< categoria_type > r (
            categoria_traits::create (i, f, this));

          this->categoria_.push_back (r);
          continue;
        }

        break;
      }
    }

    links* links::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class links (*this, f, c);
    }

    links::
    ~links ()
    {
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace gestColl
{
  namespace links
  {
    ::std::auto_ptr< ::gestColl::links::links >
    links_ (const ::std::wstring& u,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::gestColl::links::links > r (
        ::gestColl::links::links_ (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::gestColl::links::links >
    links_ (const ::std::wstring& u,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::gestColl::links::links > r (
        ::gestColl::links::links_ (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::gestColl::links::links >
    links_ (const ::std::wstring& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::gestColl::links::links > r (
        ::gestColl::links::links_ (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::gestColl::links::links >
    links_ (::std::istream& is,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::gestColl::links::links_ (isrc, f, p);
    }

    ::std::auto_ptr< ::gestColl::links::links >
    links_ (::std::istream& is,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::gestColl::links::links_ (isrc, h, f, p);
    }

    ::std::auto_ptr< ::gestColl::links::links >
    links_ (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::gestColl::links::links_ (isrc, h, f, p);
    }

    ::std::auto_ptr< ::gestColl::links::links >
    links_ (::std::istream& is,
            const ::std::wstring& sid,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::gestColl::links::links_ (isrc, f, p);
    }

    ::std::auto_ptr< ::gestColl::links::links >
    links_ (::std::istream& is,
            const ::std::wstring& sid,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::gestColl::links::links_ (isrc, h, f, p);
    }

    ::std::auto_ptr< ::gestColl::links::links >
    links_ (::std::istream& is,
            const ::std::wstring& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::gestColl::links::links_ (isrc, h, f, p);
    }

    ::std::auto_ptr< ::gestColl::links::links >
    links_ (::xercesc::InputSource& i,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::gestColl::links::links > r (
        ::gestColl::links::links_ (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::gestColl::links::links >
    links_ (::xercesc::InputSource& i,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::gestColl::links::links > r (
        ::gestColl::links::links_ (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::gestColl::links::links >
    links_ (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::gestColl::links::links > r (
        ::gestColl::links::links_ (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::gestColl::links::links >
    links_ (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::gestColl::links::links > r (
          ::gestColl::links::links_ (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (n.name () == L"links" &&
          n.namespace_ () == L"http://gestColl/links")
      {
        ::std::auto_ptr< ::gestColl::links::links > r (
          ::xsd::cxx::tree::traits< ::gestColl::links::links, wchar_t >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"links",
        L"http://gestColl/links");
    }

    ::std::auto_ptr< ::gestColl::links::links >
    links_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == L"links" &&
          n.namespace_ () == L"http://gestColl/links")
      {
        ::std::auto_ptr< ::gestColl::links::links > r (
          ::xsd::cxx::tree::traits< ::gestColl::links::links, wchar_t >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"links",
        L"http://gestColl/links");
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace gestColl
{
  namespace links
  {
    void
    operator<< (::xercesc::DOMElement& e, const link& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // nome
      //
      if (i.nome ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"nome",
            L"http://gestColl/links",
            e));

        s << *i.nome ();
      }

      // url
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"url",
            L"http://gestColl/links",
            e));

        s << i.url ();
      }

      // note
      //
      if (i.note ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"note",
            L"http://gestColl/links",
            e));

        s << *i.note ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const linklist& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // link
      //
      for (linklist::link_const_iterator
           b (i.link ().begin ()), n (i.link ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"link",
            L"http://gestColl/links",
            e));

        s << *b;
      }

      // id
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"id",
            e));

        a << i.id ();
      }
    }

    void
    links_ (::std::ostream& o,
            const ::gestColl::links::links& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::gestColl::links::links_ (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    links_ (::std::ostream& o,
            const ::gestColl::links::links& s,
            ::xml_schema::error_handler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::gestColl::links::links_ (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    links_ (::std::ostream& o,
            const ::gestColl::links::links& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::gestColl::links::links_ (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    links_ (::xercesc::XMLFormatTarget& t,
            const ::gestColl::links::links& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::gestColl::links::links_ (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    links_ (::xercesc::XMLFormatTarget& t,
            const ::gestColl::links::links& s,
            ::xml_schema::error_handler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::gestColl::links::links_ (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    links_ (::xercesc::XMLFormatTarget& t,
            const ::gestColl::links::links& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::gestColl::links::links_ (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    links_ (::xercesc::DOMDocument& d,
            const ::gestColl::links::links& s,
            ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (n.name () == L"links" &&
          n.namespace_ () == L"http://gestColl/links")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
          n.name (),
          n.namespace_ (),
          L"links",
          L"http://gestColl/links");
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    links_ (const ::gestColl::links::links& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< wchar_t > (
          L"links",
          L"http://gestColl/links",
          m, f));

      ::gestColl::links::links_ (*d, s, f);
      return d;
    }

    void
    operator<< (::xercesc::DOMElement& e, const links& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // categoria
      //
      for (links::categoria_const_iterator
           b (i.categoria ().begin ()), n (i.categoria ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"categoria",
            L"http://gestColl/links",
            e));

        s << *b;
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

