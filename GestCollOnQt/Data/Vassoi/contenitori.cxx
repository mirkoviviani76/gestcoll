// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "contenitori.hxx"

namespace gestColl
{
  namespace contenitori
  {
    // vassoio
    // 

    const vassoio::righe_type& vassoio::
    righe () const
    {
      return this->righe_.get ();
    }

    vassoio::righe_type& vassoio::
    righe ()
    {
      return this->righe_.get ();
    }

    void vassoio::
    righe (const righe_type& x)
    {
      this->righe_.set (x);
    }

    const vassoio::colonne_type& vassoio::
    colonne () const
    {
      return this->colonne_.get ();
    }

    vassoio::colonne_type& vassoio::
    colonne ()
    {
      return this->colonne_.get ();
    }

    void vassoio::
    colonne (const colonne_type& x)
    {
      this->colonne_.set (x);
    }

    const vassoio::dimensione_type& vassoio::
    dimensione () const
    {
      return this->dimensione_.get ();
    }

    vassoio::dimensione_type& vassoio::
    dimensione ()
    {
      return this->dimensione_.get ();
    }

    void vassoio::
    dimensione (const dimensione_type& x)
    {
      this->dimensione_.set (x);
    }

    void vassoio::
    dimensione (::std::auto_ptr< dimensione_type > x)
    {
      this->dimensione_.set (x);
    }

    const vassoio::id_type& vassoio::
    id () const
    {
      return this->id_.get ();
    }

    vassoio::id_type& vassoio::
    id ()
    {
      return this->id_.get ();
    }

    void vassoio::
    id (const id_type& x)
    {
      this->id_.set (x);
    }

    void vassoio::
    id (::std::auto_ptr< id_type > x)
    {
      this->id_.set (x);
    }


    // contenitore
    // 

    const contenitore::vassoio_sequence& contenitore::
    vassoio () const
    {
      return this->vassoio_;
    }

    contenitore::vassoio_sequence& contenitore::
    vassoio ()
    {
      return this->vassoio_;
    }

    void contenitore::
    vassoio (const vassoio_sequence& s)
    {
      this->vassoio_ = s;
    }

    const contenitore::id_type& contenitore::
    id () const
    {
      return this->id_.get ();
    }

    contenitore::id_type& contenitore::
    id ()
    {
      return this->id_.get ();
    }

    void contenitore::
    id (const id_type& x)
    {
      this->id_.set (x);
    }

    void contenitore::
    id (::std::auto_ptr< id_type > x)
    {
      this->id_.set (x);
    }


    // armadio
    // 

    const armadio::contenitore_sequence& armadio::
    contenitore () const
    {
      return this->contenitore_;
    }

    armadio::contenitore_sequence& armadio::
    contenitore ()
    {
      return this->contenitore_;
    }

    void armadio::
    contenitore (const contenitore_sequence& s)
    {
      this->contenitore_ = s;
    }

    const armadio::id_type& armadio::
    id () const
    {
      return this->id_.get ();
    }

    armadio::id_type& armadio::
    id ()
    {
      return this->id_.get ();
    }

    void armadio::
    id (const id_type& x)
    {
      this->id_.set (x);
    }

    void armadio::
    id (::std::auto_ptr< id_type > x)
    {
      this->id_.set (x);
    }


    // contenitori
    // 

    const contenitori::armadio_sequence& contenitori::
    armadio () const
    {
      return this->armadio_;
    }

    contenitori::armadio_sequence& contenitori::
    armadio ()
    {
      return this->armadio_;
    }

    void contenitori::
    armadio (const armadio_sequence& s)
    {
      this->armadio_ = s;
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace gestColl
{
  namespace contenitori
  {
    // vassoio
    //

    vassoio::
    vassoio (const righe_type& righe,
             const colonne_type& colonne,
             const dimensione_type& dimensione,
             const id_type& id)
    : ::xml_schema::type (),
      righe_ (righe, ::xml_schema::flags (), this),
      colonne_ (colonne, ::xml_schema::flags (), this),
      dimensione_ (dimensione, ::xml_schema::flags (), this),
      id_ (id, ::xml_schema::flags (), this)
    {
    }

    vassoio::
    vassoio (const vassoio& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      righe_ (x.righe_, f, this),
      colonne_ (x.colonne_, f, this),
      dimensione_ (x.dimensione_, f, this),
      id_ (x.id_, f, this)
    {
    }

    vassoio::
    vassoio (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      righe_ (f, this),
      colonne_ (f, this),
      dimensione_ (f, this),
      id_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, true);
        this->parse (p, f);
      }
    }

    void vassoio::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // righe
        //
        if (n.name () == L"righe" && n.namespace_ () == L"http://gestColl/contenitori")
        {
          if (!righe_.present ())
          {
            this->righe_.set (righe_traits::create (i, f, this));
            continue;
          }
        }

        // colonne
        //
        if (n.name () == L"colonne" && n.namespace_ () == L"http://gestColl/contenitori")
        {
          if (!colonne_.present ())
          {
            this->colonne_.set (colonne_traits::create (i, f, this));
            continue;
          }
        }

        // dimensione
        //
        if (n.name () == L"dimensione" && n.namespace_ () == L"http://gestColl/contenitori")
        {
          ::std::auto_ptr< dimensione_type > r (
            dimensione_traits::create (i, f, this));

          if (!dimensione_.present ())
          {
            this->dimensione_.set (r);
            continue;
          }
        }

        break;
      }

      if (!righe_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"righe",
          L"http://gestColl/contenitori");
      }

      if (!colonne_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"colonne",
          L"http://gestColl/contenitori");
      }

      if (!dimensione_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"dimensione",
          L"http://gestColl/contenitori");
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        if (n.name () == L"id" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< id_type > r (
            id_traits::create (i, f, this));

          this->id_.set (r);
          continue;
        }
      }

      if (!id_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"id",
          L"");
      }
    }

    vassoio* vassoio::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class vassoio (*this, f, c);
    }

    vassoio::
    ~vassoio ()
    {
    }

    // contenitore
    //

    contenitore::
    contenitore (const id_type& id)
    : ::xml_schema::type (),
      vassoio_ (::xml_schema::flags (), this),
      id_ (id, ::xml_schema::flags (), this)
    {
    }

    contenitore::
    contenitore (const contenitore& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      vassoio_ (x.vassoio_, f, this),
      id_ (x.id_, f, this)
    {
    }

    contenitore::
    contenitore (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      vassoio_ (f, this),
      id_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, true);
        this->parse (p, f);
      }
    }

    void contenitore::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // vassoio
        //
        if (n.name () == L"vassoio" && n.namespace_ () == L"http://gestColl/contenitori")
        {
          ::std::auto_ptr< vassoio_type > r (
            vassoio_traits::create (i, f, this));

          this->vassoio_.push_back (r);
          continue;
        }

        break;
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        if (n.name () == L"id" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< id_type > r (
            id_traits::create (i, f, this));

          this->id_.set (r);
          continue;
        }
      }

      if (!id_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"id",
          L"");
      }
    }

    contenitore* contenitore::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class contenitore (*this, f, c);
    }

    contenitore::
    ~contenitore ()
    {
    }

    // armadio
    //

    armadio::
    armadio (const id_type& id)
    : ::xml_schema::type (),
      contenitore_ (::xml_schema::flags (), this),
      id_ (id, ::xml_schema::flags (), this)
    {
    }

    armadio::
    armadio (const armadio& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      contenitore_ (x.contenitore_, f, this),
      id_ (x.id_, f, this)
    {
    }

    armadio::
    armadio (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      contenitore_ (f, this),
      id_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, true);
        this->parse (p, f);
      }
    }

    void armadio::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // contenitore
        //
        if (n.name () == L"contenitore" && n.namespace_ () == L"http://gestColl/contenitori")
        {
          ::std::auto_ptr< contenitore_type > r (
            contenitore_traits::create (i, f, this));

          this->contenitore_.push_back (r);
          continue;
        }

        break;
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        if (n.name () == L"id" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< id_type > r (
            id_traits::create (i, f, this));

          this->id_.set (r);
          continue;
        }
      }

      if (!id_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"id",
          L"");
      }
    }

    armadio* armadio::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class armadio (*this, f, c);
    }

    armadio::
    ~armadio ()
    {
    }

    // contenitori
    //

    contenitori::
    contenitori ()
    : ::xml_schema::type (),
      armadio_ (::xml_schema::flags (), this)
    {
    }

    contenitori::
    contenitori (const contenitori& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      armadio_ (x.armadio_, f, this)
    {
    }

    contenitori::
    contenitori (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      armadio_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false);
        this->parse (p, f);
      }
    }

    void contenitori::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // armadio
        //
        if (n.name () == L"armadio" && n.namespace_ () == L"http://gestColl/contenitori")
        {
          ::std::auto_ptr< armadio_type > r (
            armadio_traits::create (i, f, this));

          this->armadio_.push_back (r);
          continue;
        }

        break;
      }
    }

    contenitori* contenitori::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class contenitori (*this, f, c);
    }

    contenitori::
    ~contenitori ()
    {
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace gestColl
{
  namespace contenitori
  {
    ::std::auto_ptr< ::gestColl::contenitori::contenitori >
    contenitori_ (const ::std::wstring& u,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::gestColl::contenitori::contenitori > r (
        ::gestColl::contenitori::contenitori_ (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::gestColl::contenitori::contenitori >
    contenitori_ (const ::std::wstring& u,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::gestColl::contenitori::contenitori > r (
        ::gestColl::contenitori::contenitori_ (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::gestColl::contenitori::contenitori >
    contenitori_ (const ::std::wstring& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::gestColl::contenitori::contenitori > r (
        ::gestColl::contenitori::contenitori_ (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::gestColl::contenitori::contenitori >
    contenitori_ (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::gestColl::contenitori::contenitori_ (isrc, f, p);
    }

    ::std::auto_ptr< ::gestColl::contenitori::contenitori >
    contenitori_ (::std::istream& is,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::gestColl::contenitori::contenitori_ (isrc, h, f, p);
    }

    ::std::auto_ptr< ::gestColl::contenitori::contenitori >
    contenitori_ (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::gestColl::contenitori::contenitori_ (isrc, h, f, p);
    }

    ::std::auto_ptr< ::gestColl::contenitori::contenitori >
    contenitori_ (::std::istream& is,
                  const ::std::wstring& sid,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::gestColl::contenitori::contenitori_ (isrc, f, p);
    }

    ::std::auto_ptr< ::gestColl::contenitori::contenitori >
    contenitori_ (::std::istream& is,
                  const ::std::wstring& sid,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::gestColl::contenitori::contenitori_ (isrc, h, f, p);
    }

    ::std::auto_ptr< ::gestColl::contenitori::contenitori >
    contenitori_ (::std::istream& is,
                  const ::std::wstring& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::gestColl::contenitori::contenitori_ (isrc, h, f, p);
    }

    ::std::auto_ptr< ::gestColl::contenitori::contenitori >
    contenitori_ (::xercesc::InputSource& i,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::gestColl::contenitori::contenitori > r (
        ::gestColl::contenitori::contenitori_ (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::gestColl::contenitori::contenitori >
    contenitori_ (::xercesc::InputSource& i,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::gestColl::contenitori::contenitori > r (
        ::gestColl::contenitori::contenitori_ (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::gestColl::contenitori::contenitori >
    contenitori_ (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::gestColl::contenitori::contenitori > r (
        ::gestColl::contenitori::contenitori_ (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::gestColl::contenitori::contenitori >
    contenitori_ (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::gestColl::contenitori::contenitori > r (
          ::gestColl::contenitori::contenitori_ (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (n.name () == L"contenitori" &&
          n.namespace_ () == L"http://gestColl/contenitori")
      {
        ::std::auto_ptr< ::gestColl::contenitori::contenitori > r (
          ::xsd::cxx::tree::traits< ::gestColl::contenitori::contenitori, wchar_t >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"contenitori",
        L"http://gestColl/contenitori");
    }

    ::std::auto_ptr< ::gestColl::contenitori::contenitori >
    contenitori_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == L"contenitori" &&
          n.namespace_ () == L"http://gestColl/contenitori")
      {
        ::std::auto_ptr< ::gestColl::contenitori::contenitori > r (
          ::xsd::cxx::tree::traits< ::gestColl::contenitori::contenitori, wchar_t >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"contenitori",
        L"http://gestColl/contenitori");
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace gestColl
{
  namespace contenitori
  {
    void
    operator<< (::xercesc::DOMElement& e, const vassoio& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // righe
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"righe",
            L"http://gestColl/contenitori",
            e));

        s << i.righe ();
      }

      // colonne
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"colonne",
            L"http://gestColl/contenitori",
            e));

        s << i.colonne ();
      }

      // dimensione
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"dimensione",
            L"http://gestColl/contenitori",
            e));

        s << i.dimensione ();
      }

      // id
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"id",
            e));

        a << i.id ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const contenitore& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // vassoio
      //
      for (contenitore::vassoio_const_iterator
           b (i.vassoio ().begin ()), n (i.vassoio ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"vassoio",
            L"http://gestColl/contenitori",
            e));

        s << *b;
      }

      // id
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"id",
            e));

        a << i.id ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const armadio& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // contenitore
      //
      for (armadio::contenitore_const_iterator
           b (i.contenitore ().begin ()), n (i.contenitore ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"contenitore",
            L"http://gestColl/contenitori",
            e));

        s << *b;
      }

      // id
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"id",
            e));

        a << i.id ();
      }
    }

    void
    contenitori_ (::std::ostream& o,
                  const ::gestColl::contenitori::contenitori& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::wstring& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::gestColl::contenitori::contenitori_ (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    contenitori_ (::std::ostream& o,
                  const ::gestColl::contenitori::contenitori& s,
                  ::xml_schema::error_handler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::wstring& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::gestColl::contenitori::contenitori_ (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    contenitori_ (::std::ostream& o,
                  const ::gestColl::contenitori::contenitori& s,
                  ::xercesc::DOMErrorHandler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::wstring& e,
                  ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::gestColl::contenitori::contenitori_ (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    contenitori_ (::xercesc::XMLFormatTarget& t,
                  const ::gestColl::contenitori::contenitori& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::wstring& e,
                  ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::gestColl::contenitori::contenitori_ (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    contenitori_ (::xercesc::XMLFormatTarget& t,
                  const ::gestColl::contenitori::contenitori& s,
                  ::xml_schema::error_handler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::wstring& e,
                  ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::gestColl::contenitori::contenitori_ (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    contenitori_ (::xercesc::XMLFormatTarget& t,
                  const ::gestColl::contenitori::contenitori& s,
                  ::xercesc::DOMErrorHandler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::wstring& e,
                  ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::gestColl::contenitori::contenitori_ (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    contenitori_ (::xercesc::DOMDocument& d,
                  const ::gestColl::contenitori::contenitori& s,
                  ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (n.name () == L"contenitori" &&
          n.namespace_ () == L"http://gestColl/contenitori")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
          n.name (),
          n.namespace_ (),
          L"contenitori",
          L"http://gestColl/contenitori");
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    contenitori_ (const ::gestColl::contenitori::contenitori& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< wchar_t > (
          L"contenitori",
          L"http://gestColl/contenitori",
          m, f));

      ::gestColl::contenitori::contenitori_ (*d, s, f);
      return d;
    }

    void
    operator<< (::xercesc::DOMElement& e, const contenitori& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // armadio
      //
      for (contenitori::armadio_const_iterator
           b (i.armadio ().begin ()), n (i.armadio ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"armadio",
            L"http://gestColl/contenitori",
            e));

        s << *b;
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

