// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "contatti.hxx"

namespace gestColl
{
  namespace contatti
  {
    // contatto
    // 

    const contatto::nome_type& contatto::
    nome () const
    {
      return this->nome_.get ();
    }

    contatto::nome_type& contatto::
    nome ()
    {
      return this->nome_.get ();
    }

    void contatto::
    nome (const nome_type& x)
    {
      this->nome_.set (x);
    }

    void contatto::
    nome (::std::auto_ptr< nome_type > x)
    {
      this->nome_.set (x);
    }

    const contatto::email_type& contatto::
    email () const
    {
      return this->email_.get ();
    }

    contatto::email_type& contatto::
    email ()
    {
      return this->email_.get ();
    }

    void contatto::
    email (const email_type& x)
    {
      this->email_.set (x);
    }

    void contatto::
    email (::std::auto_ptr< email_type > x)
    {
      this->email_.set (x);
    }

    const contatto::note_type& contatto::
    note () const
    {
      return this->note_.get ();
    }

    contatto::note_type& contatto::
    note ()
    {
      return this->note_.get ();
    }

    void contatto::
    note (const note_type& x)
    {
      this->note_.set (x);
    }

    void contatto::
    note (::std::auto_ptr< note_type > x)
    {
      this->note_.set (x);
    }


    // contatti
    // 

    const contatti::contatto_sequence& contatti::
    contatto () const
    {
      return this->contatto_;
    }

    contatti::contatto_sequence& contatti::
    contatto ()
    {
      return this->contatto_;
    }

    void contatti::
    contatto (const contatto_sequence& s)
    {
      this->contatto_ = s;
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace gestColl
{
  namespace contatti
  {
    // contatto
    //

    contatto::
    contatto (const nome_type& nome,
              const email_type& email,
              const note_type& note)
    : ::xml_schema::type (),
      nome_ (nome, ::xml_schema::flags (), this),
      email_ (email, ::xml_schema::flags (), this),
      note_ (note, ::xml_schema::flags (), this)
    {
    }

    contatto::
    contatto (const contatto& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      nome_ (x.nome_, f, this),
      email_ (x.email_, f, this),
      note_ (x.note_, f, this)
    {
    }

    contatto::
    contatto (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      nome_ (f, this),
      email_ (f, this),
      note_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false);
        this->parse (p, f);
      }
    }

    void contatto::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // nome
        //
        if (n.name () == L"nome" && n.namespace_ () == L"http://gestColl/contatti")
        {
          ::std::auto_ptr< nome_type > r (
            nome_traits::create (i, f, this));

          if (!nome_.present ())
          {
            this->nome_.set (r);
            continue;
          }
        }

        // email
        //
        if (n.name () == L"email" && n.namespace_ () == L"http://gestColl/contatti")
        {
          ::std::auto_ptr< email_type > r (
            email_traits::create (i, f, this));

          if (!email_.present ())
          {
            this->email_.set (r);
            continue;
          }
        }

        // note
        //
        if (n.name () == L"note" && n.namespace_ () == L"http://gestColl/contatti")
        {
          ::std::auto_ptr< note_type > r (
            note_traits::create (i, f, this));

          if (!note_.present ())
          {
            this->note_.set (r);
            continue;
          }
        }

        break;
      }

      if (!nome_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"nome",
          L"http://gestColl/contatti");
      }

      if (!email_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"email",
          L"http://gestColl/contatti");
      }

      if (!note_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"note",
          L"http://gestColl/contatti");
      }
    }

    contatto* contatto::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class contatto (*this, f, c);
    }

    contatto::
    ~contatto ()
    {
    }

    // contatti
    //

    contatti::
    contatti ()
    : ::xml_schema::type (),
      contatto_ (::xml_schema::flags (), this)
    {
    }

    contatti::
    contatti (const contatti& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      contatto_ (x.contatto_, f, this)
    {
    }

    contatti::
    contatti (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      contatto_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false);
        this->parse (p, f);
      }
    }

    void contatti::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // contatto
        //
        if (n.name () == L"contatto" && n.namespace_ () == L"http://gestColl/contatti")
        {
          ::std::auto_ptr< contatto_type > r (
            contatto_traits::create (i, f, this));

          this->contatto_.push_back (r);
          continue;
        }

        break;
      }
    }

    contatti* contatti::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class contatti (*this, f, c);
    }

    contatti::
    ~contatti ()
    {
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace gestColl
{
  namespace contatti
  {
    ::std::auto_ptr< ::gestColl::contatti::contatti >
    contatti_ (const ::std::wstring& u,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::gestColl::contatti::contatti > r (
        ::gestColl::contatti::contatti_ (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::gestColl::contatti::contatti >
    contatti_ (const ::std::wstring& u,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::gestColl::contatti::contatti > r (
        ::gestColl::contatti::contatti_ (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::gestColl::contatti::contatti >
    contatti_ (const ::std::wstring& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::gestColl::contatti::contatti > r (
        ::gestColl::contatti::contatti_ (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::gestColl::contatti::contatti >
    contatti_ (::std::istream& is,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::gestColl::contatti::contatti_ (isrc, f, p);
    }

    ::std::auto_ptr< ::gestColl::contatti::contatti >
    contatti_ (::std::istream& is,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::gestColl::contatti::contatti_ (isrc, h, f, p);
    }

    ::std::auto_ptr< ::gestColl::contatti::contatti >
    contatti_ (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::gestColl::contatti::contatti_ (isrc, h, f, p);
    }

    ::std::auto_ptr< ::gestColl::contatti::contatti >
    contatti_ (::std::istream& is,
               const ::std::wstring& sid,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::gestColl::contatti::contatti_ (isrc, f, p);
    }

    ::std::auto_ptr< ::gestColl::contatti::contatti >
    contatti_ (::std::istream& is,
               const ::std::wstring& sid,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::gestColl::contatti::contatti_ (isrc, h, f, p);
    }

    ::std::auto_ptr< ::gestColl::contatti::contatti >
    contatti_ (::std::istream& is,
               const ::std::wstring& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::gestColl::contatti::contatti_ (isrc, h, f, p);
    }

    ::std::auto_ptr< ::gestColl::contatti::contatti >
    contatti_ (::xercesc::InputSource& i,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::gestColl::contatti::contatti > r (
        ::gestColl::contatti::contatti_ (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::gestColl::contatti::contatti >
    contatti_ (::xercesc::InputSource& i,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::gestColl::contatti::contatti > r (
        ::gestColl::contatti::contatti_ (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::gestColl::contatti::contatti >
    contatti_ (::xercesc::InputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::gestColl::contatti::contatti > r (
        ::gestColl::contatti::contatti_ (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::gestColl::contatti::contatti >
    contatti_ (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::gestColl::contatti::contatti > r (
          ::gestColl::contatti::contatti_ (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (n.name () == L"contatti" &&
          n.namespace_ () == L"http://gestColl/contatti")
      {
        ::std::auto_ptr< ::gestColl::contatti::contatti > r (
          ::xsd::cxx::tree::traits< ::gestColl::contatti::contatti, wchar_t >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"contatti",
        L"http://gestColl/contatti");
    }

    ::std::auto_ptr< ::gestColl::contatti::contatti >
    contatti_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == L"contatti" &&
          n.namespace_ () == L"http://gestColl/contatti")
      {
        ::std::auto_ptr< ::gestColl::contatti::contatti > r (
          ::xsd::cxx::tree::traits< ::gestColl::contatti::contatti, wchar_t >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"contatti",
        L"http://gestColl/contatti");
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace gestColl
{
  namespace contatti
  {
    void
    operator<< (::xercesc::DOMElement& e, const contatto& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // nome
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"nome",
            L"http://gestColl/contatti",
            e));

        s << i.nome ();
      }

      // email
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"email",
            L"http://gestColl/contatti",
            e));

        s << i.email ();
      }

      // note
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"note",
            L"http://gestColl/contatti",
            e));

        s << i.note ();
      }
    }

    void
    contatti_ (::std::ostream& o,
               const ::gestColl::contatti::contatti& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::gestColl::contatti::contatti_ (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    contatti_ (::std::ostream& o,
               const ::gestColl::contatti::contatti& s,
               ::xml_schema::error_handler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::gestColl::contatti::contatti_ (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    contatti_ (::std::ostream& o,
               const ::gestColl::contatti::contatti& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::gestColl::contatti::contatti_ (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    contatti_ (::xercesc::XMLFormatTarget& t,
               const ::gestColl::contatti::contatti& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::gestColl::contatti::contatti_ (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    contatti_ (::xercesc::XMLFormatTarget& t,
               const ::gestColl::contatti::contatti& s,
               ::xml_schema::error_handler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::gestColl::contatti::contatti_ (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    contatti_ (::xercesc::XMLFormatTarget& t,
               const ::gestColl::contatti::contatti& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::gestColl::contatti::contatti_ (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    contatti_ (::xercesc::DOMDocument& d,
               const ::gestColl::contatti::contatti& s,
               ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (n.name () == L"contatti" &&
          n.namespace_ () == L"http://gestColl/contatti")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
          n.name (),
          n.namespace_ (),
          L"contatti",
          L"http://gestColl/contatti");
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    contatti_ (const ::gestColl::contatti::contatti& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< wchar_t > (
          L"contatti",
          L"http://gestColl/contatti",
          m, f));

      ::gestColl::contatti::contatti_ (*d, s, f);
      return d;
    }

    void
    operator<< (::xercesc::DOMElement& e, const contatti& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // contatto
      //
      for (contatti::contatto_const_iterator
           b (i.contatto ().begin ()), n (i.contatto ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"contatto",
            L"http://gestColl/contatti",
            e));

        s << *b;
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

